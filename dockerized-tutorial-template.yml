AWSTemplateFormatVersion: '2010-09-09'
Description: Use Fargate and Lambdas to launch a dockerized tutorial

Parameters:
  TutorialImage:
    Type: String
    Description: Docker image with tutorial materials
  TutorialName:
    Type: String
    Description: Name of the tutorial
  TutorialPort:
    Type: Number
    Description: Port to expose in docker
  TutorialQueryString:
    Type: String
    Description: Query string to append to the container URL
    Default: ""

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub "${TutorialName}-Vpc"

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub "${TutorialName}-PublicSubnet"

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "${TutorialName}-cluster"

  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub "${TutorialName}-task"
      Cpu: '512'
      Memory: '1024'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: !Sub "${TutorialName}-container"
          Image: !Ref TutorialImage
          PortMappings:
            - ContainerPort: !Ref TutorialPort
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub "/ecs/${TutorialName}-task"
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: ecs

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/ecs/${TutorialName}-task"
      RetentionInDays: 7

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow port access
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref TutorialPort
          ToPort: !Ref TutorialPort
          CidrIp: 0.0.0.0/0

  SlackBotLaunchLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: SlackBotLaunch
      Handler: launch-function.lambda_handler
      Runtime: python3.12
      Role: !GetAtt SlackBotLambdaRole.Arn
      Timeout: 15
      Code:
        S3Bucket: hpcic-tutorials
        S3Key: slackbot/launch-function.zip
        S3ObjectVersion: "AZ3eK2dk8ZeSjB8Jjj4czSwm7jckZ9Ph"

  SlackBotNotifyLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: SlackBotNotify
      Handler: notify-function.lambda_handler
      Runtime: python3.12
      Role: !GetAtt SlackBotLambdaRole.Arn
      Timeout: 500
      Code:
        S3Bucket: hpcic-tutorials
        S3Key: slackbot/notify-function.zip
        S3ObjectVersion: "lRUfoG36khNogMkK9akbqdPPF7rdTgHF"

  SlackBotEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: SlackBotTaskReady
      EventBusName: default
      EventPattern:
        source:
          - "custom.slackbot"
      Targets:
        - Arn: !GetAtt SlackBotNotifyLambda.Arn
          Id: SlackNotify

  SlackBotNotifyPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref SlackBotNotifyLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt SlackBotEventRule.Arn

  SlackBotLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: SlackBotLambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: SlackBotPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
              - Effect: Allow
                Action:
                  - cloudformation:DescribeStacks
                  - events:PutEvents
                Resource:
                  - !Sub arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}/*
                  - !Sub arn:aws:events:${AWS::Region}:${AWS::AccountId}:event-bus/default
              - Effect: Allow
                Action:
                  - ecs:RunTask
                  - ecs:DescribeTasks
                  - ec2:DescribeNetworkInterfaces
                  - ecs:TagResource
                Resource: "*"
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: !GetAtt TaskExecutionRole.Arn

  SlackHttpApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: SlackBotAPI
      ProtocolType: HTTP

  SlackHttpApiIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref SlackHttpApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !GetAtt SlackBotLaunchLambda.Arn
      PayloadFormatVersion: "2.0"

  SlackHttpApiRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SlackHttpApi
      RouteKey: "POST /slack/command"
      Target: !Sub "integrations/${SlackHttpApiIntegration}"

  SlackHttpApiStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref SlackHttpApi
      StageName: $default
      AutoDeploy: true

  SlackBotLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref SlackBotLaunchLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${SlackHttpApi}/*/*"

  SlackBotNotifyLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${SlackBotNotifyLambda}"
      RetentionInDays: 7

  SlackBotLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${SlackBotLaunchLambda}"
      RetentionInDays: 7

Outputs:
  ClusterName:
    Description: ECS Cluster Name
    Value: !Ref Cluster

  TaskDefinitionArn:
    Description: Task Definition ARN
    Value: !Ref TaskDefinition

  SecurityGroupId:
    Description: Security Group ID
    Value: !Ref SecurityGroup

  PublicSubnetId:
    Description: Public Subnet ID
    Value: !Ref PublicSubnet

  TutorialPort:
    Description: Port exposed by the container
    Value: !Ref TutorialPort

  TutorialQueryString:
    Description: Query string to append to the container URL
    Value: !Ref TutorialQueryString

  RunTaskCommandTemplate:
    Description: Template for launching a tutorial task
    Value: !Sub |

      COUNT=$(aws ecs list-tasks \
        --cluster ${Cluster} \
        --desired-status RUNNING \
        --query 'taskArns' \
        --output text | wc -w)
      TASK_ID=$(printf "task-%03d" $((COUNT + 1)))

      aws ecs run-task \
        --cluster ${Cluster} \
        --launch-type FARGATE \
        --task-definition ${TaskDefinition} \
        --network-configuration "awsvpcConfiguration={subnets=[${PublicSubnet}],securityGroups=[${SecurityGroup}],assignPublicIp=ENABLED}" \
        --tags key=task-id,value=$TASK_ID

  LaunchMultipleTasksCommand:
    Description: Bash function to launch N tutorial tasks manually
    Value: !Sub |
      launch_tasks() {
        local N=$1
        if [ -z "$N" ]; then
          echo "Usage: launch_tasks <number-of-tasks>"
          return 1
        fi

        for ((i = 1; i <= N; i++)); do
          TASK_ID=$(printf "task-%03d" $i)
          echo "Launching $TASK_ID..."

          aws ecs run-task \
            --cluster ${Cluster} \
            --launch-type FARGATE \
            --task-definition ${TaskDefinition} \
            --network-configuration "awsvpcConfiguration={subnets=[${PublicSubnet}],securityGroups=[${SecurityGroup}],assignPublicIp=ENABLED}" \
            --tags key=task-id,value=$TASK_ID
        done
      }

      echo "Run 'launch_tasks N' to launch N tasks."

  GetContainerIPCommand:
    Description: Print task-id and public IP for all running tasks
    Value: !Sub |
      echo "task-id,public-ip"

      aws ecs list-tasks \
        --cluster ${Cluster} \
        --desired-status RUNNING \
        --query 'taskArns[]' \
        --output text | tr '\t' '\n' | while read TASK; do

        TASK_ID=$(aws ecs list-tags-for-resource \
          --resource-arn "$TASK" \
          --query 'tags[?key==`task-id`].value' \
          --output text)

        ENI_ID=$(aws ecs describe-tasks \
          --cluster ${Cluster} \
          --tasks "$TASK" \
          --query 'tasks[0].attachments[0].details[?name==`networkInterfaceId`].value' \
          --output text)

        PUBLIC_IP=$(aws ec2 describe-network-interfaces \
          --network-interface-ids "$ENI_ID" \
          --query 'NetworkInterfaces[0].Association.PublicIp' \
          --output text)

        echo "$TASK_ID,$PUBLIC_IP"
      done

  CleanupCommand:
    Description: Stop all manually launched tutorial tasks
    Value: !Sub |

      aws ecs list-tasks --cluster ${Cluster} --desired-status RUNNING --query 'taskArns[]' --output text | \
      xargs -n 1 -I {} aws ecs stop-task --cluster ${Cluster} --task {}

  SlackCommandUrl:
    Description: Slack command endpoint URL
    Value: !Sub "https://${SlackHttpApi}.execute-api.${AWS::Region}.amazonaws.com/slack/command"
