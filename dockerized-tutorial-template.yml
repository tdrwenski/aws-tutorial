AWSTemplateFormatVersion: '2010-09-09'
Description: Use fargate to run a dockerized tutorial

Parameters:
  TutorialImage:
    Type: String
    Description: Docker image with tutorial materials
  TutorialName:
    Type: String
    Description: Name of the tutorial
  TutorialPort:
    Type: Number
    Description: Port to expose in docker

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub "${TutorialName}-Vpc"

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub "${TutorialName}-PublicSubnet"

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "${TutorialName}-cluster"

  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub "${TutorialName}-task"
      Cpu: '512'
      Memory: '1024'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: !Sub "${TutorialName}-container"
          Image: !Ref TutorialImage
          PortMappings:
            - ContainerPort: !Ref TutorialPort
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub "/ecs/${TutorialName}-task"
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: ecs

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/ecs/${TutorialName}-task"
      RetentionInDays: 7

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow port access
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref TutorialPort
          ToPort: !Ref TutorialPort
          CidrIp: 0.0.0.0/0

  Service:
    Type: AWS::ECS::Service
    DependsOn: Cluster
    Properties:
      Cluster: !Ref Cluster
      LaunchType: FARGATE
      DesiredCount: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref PublicSubnet
          SecurityGroups:
            - !Ref SecurityGroup
      TaskDefinition: !Ref TaskDefinition

Outputs:
  ClusterName:
    Description: ECS Cluster Name
    Value: !Ref Cluster

  ServiceName:
    Description: ECS Service Name
    Value: !Ref Service

  TaskDefinitionArn:
    Description: Task Definition ARN
    Value: !Ref TaskDefinition

  SecurityGroupId:
    Description: Security Group ID
    Value: !Ref SecurityGroup

  GetContainerIPCommand:
    Description: Commands to get the container's public IP
    Value: !Sub |
      # First, get the task ID:
      TASK_ARN=$(aws ecs list-tasks --cluster ${Cluster} --query 'taskArns[0]' --output text)

      # Then, get the network interface ID:
      ENI_ID=$(aws ecs describe-tasks --cluster ${Cluster} --tasks $TASK_ARN --query 'tasks[0].attachments[0].details[?name==`networkInterfaceId`].value' --output text)

      # Finally, get the public IP:
      PUBLIC_IP=$(aws ec2 describe-network-interfaces --network-interface-ids $ENI_ID --query 'NetworkInterfaces[0].Association.PublicIp' --output text)

      echo "Tutorial at $PUBLIC_IP:${TutorialPort}"
